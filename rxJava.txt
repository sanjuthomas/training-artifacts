https://developer.couchbase.com/documentation/server/3.x/developer/java-2.0/observables.html

http://tomstechnicalblog.blogspot.com/2015/11/rxjava-achieving-parallelization.html

https://www.baeldung.com/jax-rs-reactive-client


package org.sanju;

import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.schedulers.Schedulers;

public class ParallelTransformation {
    public static void main(String[] args) throws InterruptedException {
        Observable<Integer> vals = Observable.range(1,10000);
        vals.flatMap(val -> Observable.just(val)
                .subscribeOn(Schedulers.computation())
                .map(i -> intenseCalculation(i))
        ).buffer(100).subscribe(val -> System.out.println(val));
        Thread.sleep(10000);
    }

    private static int intenseCalculation(Integer i) throws InterruptedException {
        System.out.println("Calculating " + i + " on " + Thread.currentThread().getName());
        Thread.sleep(100);
        return i *i;
    }
}


----------------

package org.sanju;

import io.reactivex.rxjava3.core.Observable;
import io.reactivex.rxjava3.functions.Consumer;
import io.reactivex.rxjava3.functions.Function;
import io.reactivex.rxjava3.schedulers.Schedulers;

import java.util.List;

public class ParallelTransformation {

    public static void main(String[] args) throws InterruptedException {
        Writer writer = new Writer();
        Calculator calculator = new Calculator();
        Observable<Integer> observable = Observable.range(1,1000);
        observable.flatMap(val -> Observable.just(val)
                .subscribeOn(Schedulers.computation())
                .map(calculator)
        ).buffer(100).subscribe(writer);

        observable.doOnError( e -> {
            System.out.println("Error occurred!");
        });
    }

    private static Row intenseCalculation(Integer i) throws InterruptedException {
        Thread.sleep(10);
        return new Row(i);
    }
}

class Calculator implements Function<Integer, Row> {
    @Override
    public Row apply(Integer i) throws Throwable {
        Thread.sleep(10);
        return new Row(i);
    }
}

interface IWriter {
    void write();
}

class Row {
    int i;
    public Row(int i) {
        this.i = i;
    }

    @Override
    public String toString() {
        return String.valueOf(i);
    }
}

class Writer implements IWriter, Consumer<List<Row>> {

    @Override
    public void accept(List<Row> rows) throws Throwable {
        System.out.println(rows);
    }

    @Override
    public void write() {

    }
}
